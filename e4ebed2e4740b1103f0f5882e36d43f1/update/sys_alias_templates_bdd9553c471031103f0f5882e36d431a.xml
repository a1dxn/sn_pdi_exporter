<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_alias_templates">
    <sys_alias_templates action="INSERT_OR_UPDATE">
        <default_data_template>{&#13;
	"credential": {&#13;
		"api_key": "&lt;provider-api-key&gt;",&#13;
		"name": "GitHub",&#13;
		"table": "api_key_credentials"&#13;
	},&#13;
	"connection": {&#13;
		"use_mid": false,&#13;
		"connection_url": "https://api.github.com/graphql",&#13;
		"name": "&lt;github-graphql&gt;",&#13;
		"table": "http_connection"&#13;
	}&#13;
}</default_data_template>
        <dynamic_data_schema>{
	"connection_fields": [
		{
			"name": "connection.name",
			"label": "Connection Name",
			"type": "text",
			"defaultValue": "GitHub GraphQL - &lt;username&gt;",
			"hint": "Display name for the Connection",
			"mandatory": true
		}
	],
	"credential_fields": [
		{
			"name": "credential.name",
			"label": "Credential Name",
			"type": "text",
			"defaultValue": "GitHub &lt;username&gt; - &lt;purpose&gt;",
			"hint": "Display name for the Credential",
			"mandatory": true
		},
		{
			"name": "credential.api_key",
			"label": "API Key",
			"type": "password",
			"defaultValue": "",
			"hint": "API Key obtained from GitHub",
			"mandatory": true
		}
	]
}</dynamic_data_schema>
        <name>GitHub GraphQL API Key</name>
        <on_edit_script><![CDATA[(function execute(aliasId, connectionSysId, jsonDefaultData, jsonDynamicData) {
   // aliasId: sys_id of the alias record
   // connectionSysId: sys_id of the connection record created by using the default and dynamic data
   // jsonDefaultData (String): The default JSON template data from template table
   // e.g. var jsonDefaultParsed = JSON.parse(jsonDefaultData);
   //      gs.info("default connection url = " + jsonDefaultParsed["connection"]["connection_url"]);
   // jsonDynamicData (String): User input based on the key/values defined in "Dynamic Data"
   // e.g. var jsonDynamicParsed = JSON.parse(jsonDynamicData);
   //      gs.info("dynamic connection url = " + jsonDynamicParsed["connection.connection_url"]);
})(aliasId, connectionSysId, jsonDefaultData, jsonDynamicData);
]]></on_edit_script>
        <post_process_script><![CDATA[(function execute(aliasId, connectionSysId, jsonDefaultData, jsonDynamicData) {
   // aliasId: sys_id of the alias record
   // connectionSysId: sys_id of the connection record created by using the default and dynamic data
   // jsonDefaultData (String): The default JSON template data from template table
   // e.g. var jsonDefaultParsed = JSON.parse(jsonDefaultData);
   //      gs.info("default connection url = " + jsonDefaultParsed["connection"]["connection_url"]);
   // jsonDynamicData (String): User input based on the key/values defined in "Dynamic Data"
   // e.g. var jsonDynamicParsed = JSON.parse(jsonDynamicData);
   //      gs.info("dynamic connection url = " + jsonDynamicParsed["connection.connection_url"]);
})(aliasId, connectionSysId, jsonDefaultData, jsonDynamicData);
]]></post_process_script>
        <pre_edit_script><![CDATA[(function execute(aliasId, connectionSysId, jsonDefaultData, jsonDynamicData) {
   // aliasId: sys_id of the alias record.
   // connectionSysId: sys_id of the connection record created by using the default and dynamic data.
   // jsonDefaultData (String): The default JSON template data from template table.
   // e.g. var jsonDefaultParsed = JSON.parse(jsonDefaultData);
   //      gs.info("default connection url = " + jsonDefaultParsed["connection"]["connection_url"]);
   // jsonDynamicData (String): Current values of Connection and Credential fields (except Password fields) based on the key-value pairs defined in "Dynamic Data".
   // e.g. var jsonDynamicParsed = JSON.parse(jsonDynamicData);
   //      gs.info("dynamic connection url = " + jsonDynamicParsed["connection.connection_url"]);

   //returns array of objects. Each object has name-value pairs for populating additional fields values in connections dashboard in the edit view.
   //In this example script, additionalField1, additionalField2 are additional fields.
   //Here we define calcAdditionalField1(), calcAdditionalField2() functions in the script
   //to calculate current values for additionalField1, additionalField2.

   //return [{
   //         name: "additionalField1"
   //         value: calcAdditionalField1(),
   //    },
   //    {
   //         name: "additionalField2"
   //         value: calcAdditionalField2(),
   //    }
   //];

   return [];
})(aliasId, connectionSysId, jsonDefaultData, jsonDynamicData);
]]></pre_edit_script>
        <sys_class_name>sys_alias_templates</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-07-25 09:20:50</sys_created_on>
        <sys_id>bdd9553c471031103f0f5882e36d431a</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>GitHub GraphQL API Key</sys_name>
        <sys_package display_value="PDI Exporter" source="e4ebed2e4740b1103f0f5882e36d43f1">e4ebed2e4740b1103f0f5882e36d43f1</sys_package>
        <sys_policy/>
        <sys_scope display_value="PDI Exporter">e4ebed2e4740b1103f0f5882e36d43f1</sys_scope>
        <sys_update_name>sys_alias_templates_bdd9553c471031103f0f5882e36d431a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-25 09:32:08</sys_updated_on>
    </sys_alias_templates>
</record_update>
